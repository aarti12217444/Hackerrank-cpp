#include <iostream>
#include <exception>
#include <string>
#include <stdexcept>
#include <vector>
#include <cmath>
using namespace std;

class Server {
private:
    static int load; // Keeps track of server load
public:
    static int compute(long long A, long long B) {
        load += 1; // Increment server load
        if (A < 0) {
            throw invalid_argument("A is negative");
        }
        vector<int> v(A, 0); // Create a vector of size A initialized to 0
        int real = -1;
        if (B == 0) throw 0; // Throw an exception if B is 0
        real = (A / B) * real;
        int ans = v.at(B); // Accessing the B-th element (may throw exception)
        return real + A - B * ans;
    }
    static int getLoad() {
        return load; // Returns the current server load
    }
};

// Initialize static member
int Server::load = 0;

int main() {
    int T;
    cin >> T; // Number of test cases
    
    while (T--) {
        long long A, B;
        cin >> A >> B;

        try {
            cout << Server::compute(A, B) << endl; // Call compute and print result
        } 
        catch (bad_alloc& error) {
            cout << "Not enough memory" << endl;
        }
        catch (exception& error) {
            cout << "Exception: " << error.what() << endl;
        }
        catch (...) {
            cout << "Other Exception" << endl;
        }
    }

    // Print the total server load after all test cases
    cout << Server::getLoad() << endl;

    return 0;
}
